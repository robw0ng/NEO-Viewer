/**
 * The </code>NeoDatabase</code> class is a database used to hold NearEarthObjects.
 * @author Robert Wong
 *    email: robert.c.wong@stonybrook.edu
 *    Stony Brook ID: 115226159
 *    Recitation: R02
 */
import big.data.*;
import java.util.LinkedList;
import java.util.Comparator;
import java.util.Collections;
import java.util.Iterator;
import java.text.SimpleDateFormat;
public class NeoDatabase{
    public static final String API_KEY = "bp3qzOVZroomuo9ttRMtBCTkFjQVNf2LWx4zhzpR"; 
    public static final String API_ROOT = "https://api.nasa.gov/neo/rest/v1/neo/browse?";
    private LinkedList<NearEarthObject> listDataBase = new LinkedList<NearEarthObject>();

    /**
     * Default Constructor.
     */
    public NeoDatabase(){};

    /**
     * Builds a query URL given a page number. This should be a simple method which returns (API_ROOT + "page=" + pageNumber + "&api_key=" + API_KEY)
     * @param pageNumber Integer ranging from 0 to 715 indicating the page the user wishes to load.
     * <dt>Preconditions:
     * <dd>0 ≤ page ≤ 715.
     * @return String of the QueryURL
     * @throws IllegalArgumentException If pageNumber is not in the valid range.
     */
    public String buildQueryURL(int pageNumber) throws IllegalArgumentException{
        if(pageNumber<0 || pageNumber>715){
            throw new IllegalArgumentException();
        }

        return API_ROOT + "page=" + pageNumber + "&api_key=" + API_KEY;
    }

    /**
     * Opens a connection to the data source indicated by queryURL and adds all NearEarthObjects found in the dataset.
     * @param queryURL String containing the URL requesting a dataset from the NASA NeoW service (should be generated by buildQueryURL() above).
     * <dt>Preconditions:
     * <dd>queryURL is a non-null string representing a valid API request to the NASA NeoW service.
     * <dt>Postconditions:
     * <dd>All NearEarthObject records returned have been added to the database, or else a IllegalArgumentException has been thrown.
     * @throws IllegalArgumentException If queryURL is null or could not be resolved by the server.
     */
    public void addAll(String queryURL) throws IllegalArgumentException{
        if(queryURL==null){
            throw new IllegalArgumentException();
        }

        DataSource ds = DataSource.connectJSON(queryURL);
        ds.load();
        NearEarthObject[] nearEarthObjects = ds.fetchArray(
            "NearEarthObject",
            "near_earth_objects/neo_reference_id",
            "near_earth_objects/name",
            "near_earth_objects/absolute_magnitude_h",
            "near_earth_objects/estimated_diameter/kilometers/estimated_diameter_min",
            "near_earth_objects/estimated_diameter/kilometers/estimated_diameter_max",
            "near_earth_objects/is_potentially_hazardous_asteroid",
            "near_earth_objects/close_approach_data/epoch_date_close_approach",
            "near_earth_objects/close_approach_data/miss_distance/kilometers",
            "near_earth_objects/close_approach_data/orbiting_body"
        );
        
        for(int i = 0; i < nearEarthObjects.length; ++i) {
            listDataBase.add(nearEarthObjects[i]);
        }
    }

    /**
     * Sorts the database using the specified Comparator of NearEarthObjects.
     * @param comp Comparator of NearEarthObjects which will be used to sort the database. This parameter can be any of the required Comparator classes listed above.
     * <dt>Preconditions:
     * <dd>comp is not null.
     * <dt>Postconditions:
     * <dd>The database has been sorted based on the order specified by the inidcated Comparator of NearEarthObjects.
     * @throws IllegalArgumentException If comp is null.
     */
    public void sort(Comparator<NearEarthObject> comp) throws IllegalArgumentException{
        if(comp==null){
            throw new IllegalArgumentException();
        }
        Collections.sort(listDataBase,comp);
    }

    /**
     * Displays the database in a neat, tabular form, listing all member variables for each NearEarthObject. Note the table should be printed in the order specified by the last sort() call.
     * <dt>Preconditions:
     * <dd>This NeoDatabase is initialized and not null.
     * <dt>Postconditions:
     * <dd>The table has been printed to the console but remains unchanged.
     */
    public void printTable(){
        System.out.println("  ID   |           Name            | Mag. | Diameter | Danger | Close Date | Miss Dist | Orbits");
        System.out.println("================================================================================================");
        for (Iterator<NearEarthObject> listIt = listDataBase.iterator(); listIt.hasNext();){
            NearEarthObject got = listIt.next();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
            String formattedDate = dateFormat.format(got.getClosestApproachDate());
            System.out.printf("%-8d %-27.26s %-7.1f %-9.3f %-8b %-12s %-11.0f %s\n",got.getReferenceID(),got.getName(), got.getAbsoluteMagnitude(), got.getAverageDiameter(), got.isDangerous(),formattedDate, got.getMissDistance(), got.getOrbitingBody());
        }
    }

    /**
     * Returns the LinkedList of Near Earth Objects.
     * @return The linked list of NEOs.
     */
    public LinkedList<NearEarthObject> getNeoList(){
        return this.listDataBase;
    }
}
